import random
import math
from environment import Agent, Environment
from planner import RoutePlanner
from simulator import Simulator


class LearningAgent(Agent):
    """ An agent that learns to drive in the Smartcab world.
        This is the object you will be modifying. """

    def __init__(self, env, learning=False, epsilon=1.0, alpha=0.5, a=0.05, decay=None):
        super(LearningAgent, self).__init__(env)     # Set the agent in the environment
        self.planner = RoutePlanner(self.env, self)  # Create a route planner
        self.valid_actions = self.env.valid_actions  # The set of valid actions

        # Set parameters of the learning agent
        self.learning = learning # Whether the agent is expected to learn
        self.Q = dict()          # Create a Q-table which will be a dictionary of tuples
        self.epsilon = epsilon   # Random exploration factor
        self.alpha = alpha       # Learning factor

        # Set any additional class parameters as needed
        self.decay_epsilon_func = dict()
        self.decay_epsilon_func[None] = self.decay_epsilon
        self.decay_epsilon_func['exp'] = self.decay_epsilon_exp
        self.decay_epsilon_func['inv'] = self.decay_epsilon_inv_t
        self.decay_epsilon_func['cos'] = self.decay_epsilon_cos
        self.decay = decay
        self.a = a
        self.t = 0.0

    def decay_epsilon(self):
        self.epsilon -= self.a
        return None

    def decay_epsilon_exp(self):
        self.epsilon = math.exp(-1*self.a*self.t)
        self.t += 1.0
        return None

    def decay_epsilon_inv_t(self):
        self.epsilon = 1/self.t**2
        self.t += 1
        return None

    def decay_epsilon_cos(self):
        self.epsilon = math.cos(self.a*self.t)
        self.t += 1
        return None

    def reset(self, destination=None, testing=False):
        """ The reset function is called at the beginning of each trial.
            'testing' is set to True if testing trials are being used
            once training trials have completed. """

        # Select the destination as the new location to route to
        self.planner.route_to(destination)
        
        # Update epsilon using a decay function of your choice
        # Update additional class parameters as needed
        # If 'testing' is True, set epsilon and alpha to 0
        if testing is True:
            self.epsilon = 0
        else:
            self.decay_epsilon_func[self.decay]()
        return None

    def build_state(self):
        """ The build_state function is called when the agent requests data from the 
            environment. The next waypoint, the intersection inputs, and the deadline 
            are all features available to the agent. """

        # Collect data about the environment
        waypoint = self.planner.next_waypoint() # The next waypoint 
        inputs = self.env.sense(self)           # Visual input - intersection light and traffic
        # deadline = self.env.get_deadline(self)  # Remaining deadline (unnecessary)

        # Set 'state' as a tuple of relevant data for the agent
        state = (waypoint,)
        for k, v in inputs.iteritems():
            if k != 'left' and k != 'right':
                state += (v,)
        return state

    def get_max_q(self, state):
        """ The get_max_Q function is called when the agent is asked to find the
            maximum Q-value of all actions based on the 'state' the smartcab is in. """

        # Calculate the maximum Q-value of all actions for a given state
        q_for_state = self.Q[state]
        max_q_value = max(q_for_state.values())
        if max_q_value == 0.0: # Q never be updated
            return random.choice(self.valid_actions)
        max_q_candidate = [key for key in q_for_state.keys() if q_for_state[key] == max_q_value]
        return random.choice(max_q_candidate)

    def create_q(self, state):
        """ The createQ function is called when a state is generated by the agent. """

        # When learning, check if the 'state' is not in the Q-table
        # If it is not, create a new dictionary for that state
        #   Then, for each action available, set the initial Q-value to 0.0
        if state not in self.Q:
            q_for_state = dict()
            for action in self.valid_actions:
                q_for_state[action] = 0.0
            self.Q[state] = q_for_state
        return None

    def choose_action(self, state):
        """ The choose_action function is called when the agent is asked to choose
            which action to take, based on the 'state' the smartcab is in. """

        # Set the agent state and default action
        self.state = state
        self.next_waypoint = self.planner.next_waypoint()
        # action = None

        # When not learning, choose a random action
        # When learning, choose a random action with 'epsilon' probability
        #   Otherwise, choose an action with the highest Q-value for the current state
        if not self.learning or random.random() < self.epsilon:
            action = random.choice(self.valid_actions)
        else:
            action = self.get_max_q(state)

        return action

    def learn(self, state, action, reward):
        """ The learn function is called after the agent completes an action and
            receives an award. This function does not consider future rewards 
            when conducting learning. """

        # When learning, implement the value iteration update rule
        #   Use only the learning rate 'alpha' (do not use the discount factor 'gamma')
        if self.learning:
            q_for_state = self.Q[state]
            q_for_state[action] += self.alpha * (reward - q_for_state[action])

        return

    def update(self):
        """ The update function is called when a time step is completed in the 
            environment for a given trial. This function will build the agent
            state, choose an action, receive a reward, and learn if enabled. """

        state = self.build_state()          # Get current state
        self.create_q(state)                 # Create 'state' in Q-table
        action = self.choose_action(state)  # Choose an action
        reward = self.env.act(self, action) # Receive a reward
        self.learn(state, action, reward)   # Q-learn

        return
        

def run():
    """ Driving function for running the simulation. 
        Press ESC to close the simulation, or [SPACE] to pause the simulation. """

    ##############
    # Create the environment
    # Flags:
    #   verbose     - set to True to display additional output from the simulation
    #   num_dummies - discrete number of dummy agents in the environment, default is 100
    #   grid_size   - discrete number of intersections (columns, rows), default is (8, 6)
    env = Environment(verbose=False)

    # Turning decay factor
    expected_t = 500.0
    # a = (math.pi/2.0)/expected_t
    a = 3 / expected_t

    ##############
    # Create the driving agent
    # Flags:
    #   learning   - set to True to force the driving agent to use Q-learning
    #    * epsilon - continuous value for the exploration factor, default is 1
    #    * alpha   - continuous value for the learning rate, default is 0.5
    #    * a       - continuous value for the decay factor, default is 0.05

    agent = env.create_agent(LearningAgent, True, epsilon=1, alpha=0.6, a=a, decay='exp')
    # agent = env.create_agent(LearningAgent, False)
    ##############
    # Follow the driving agent
    # Flags:
    #   enforce_deadline - set to True to enforce a deadline metric
    env.set_primary_agent(agent, enforce_deadline=True)

    ##############
    # Create the simulation
    # Flags:
    #   update_delay - continuous time (in seconds) between actions, default is 2.0 seconds
    #   display      - set to False to disable the GUI if PyGame is enabled
    #   log_metrics  - set to True to log trial and simulation results to /logs
    #   optimized    - set to True to change the default log file name
    sim = Simulator(env, display=False, update_delay=0.0, log_metrics=True, optimized=True)
    
    ##############
    # Run the simulator
    # Flags:
    #   tolerance  - epsilon tolerance before beginning testing, default is 0.05 
    #   n_test     - discrete number of testing trials to perform, default is 0
    sim.run(n_test=200, tolerance=0.05)


if __name__ == '__main__':
    run()
